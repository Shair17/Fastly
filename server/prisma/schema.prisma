generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id String @id @default(uuid())

  name     String
  avatar   String
  dni      String @db.VarChar(8)
  phone    String @db.VarChar(9)
  address  String
  email    String @unique
  password String

  birthDate DateTime

  refreshToken String?

  resetPasswordToken String?

  isBanned  Boolean @default(false)
  banReason String?

  isActive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Customer {
  id String @id @default(uuid())

  name     String
  avatar   String
  dni      String
  phone    String
  address  String
  email    String @unique
  password String

  birthDate DateTime

  refreshToken String?

  resetPasswordToken String?

  stores Store[]

  isBanned  Boolean @default(false)
  banReason String?

  isActive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Vehicle {
  NONE
  CARRO
  MOTO
  BICICLETA
  PIE
}

model Dealer {
  id String @id @default(uuid())

  name     String
  avatar   String
  dni      String
  phone    String
  address  String
  email    String @unique
  password String

  vehicle Vehicle @default(NONE)

  available Boolean @default(false)

  birthDate DateTime

  refreshToken String?

  resetPasswordToken String?

  isBanned  Boolean @default(false)
  banReason String?

  rankings DealerRaking[]

  isActive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DealerRaking {
  id String @id @default(uuid())

  comment String?
  value   Int     @db.TinyInt()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Dealer    Dealer?  @relation(fields: [dealerId], references: [id])
  dealerId  String?
}

model User {
  id String @id @default(uuid())

  name   String
  avatar String?
  phone  String?
  dni    String?
  email  String?

  refreshToken String?

  facebookId          String
  facebookAccessToken String

  isBanned  Boolean @default(false)
  banReason String?

  addresses UserAddress[]
  favorites UserFavorite[]
  cart      UserCart[]
  orders    Order[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  StoreRanking StoreRanking[]
}

enum UserAddressTag {
  CASA
  AMIGO
  PAREJA
  TRABAJO
  UNIVERSIDAD
  OTRO
}

model UserAddress {
  id String @id @default(uuid())

  name         String
  street       String
  instructions String
  tag          UserAddressTag
  zip          String
  city         String
  latitude     Float          @db.Float()
  longitude    Float          @db.Float()

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserFavorite {
  id String @id @default(uuid())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCart {
  id String @id @default(uuid())

  product   Product @relation(fields: [productId], references: [id])
  productId String

  quantity Int @default(1)

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id String @id @default(uuid())

  code        String  @unique @db.VarChar(10)
  discount    Float   @db.Float()
  description String?

  expiration DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  CANCELLED

  PROBLEM
  PENDING
  SENT
  DELIVERED
}

model Order {
  id String @id @default(uuid())

  product   Product @relation(fields: [productId], references: [id])
  productId String

  deliveryPrice Float @db.Float()

  quantity Int

  status  OrderStatus @default(PENDING)
  message String?

  arrivalTime DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Product {
  id String @id @default(uuid())

  name        String
  description String
  price       Float  @db.Float()
  image       String
  blurHash    String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserCart  UserCart[]
  Store     Store?     @relation(fields: [storeId], references: [id])
  storeId   String?
  Order     Order[]
}

enum StoreCategory {
  LICORERIA
  RESTAURANTE
  MASCOTAS
  MODA
  TECNOLOGIA
  JUGUETERIA
  FARMACIA
  CUIDADO_PERSONAL
  MAQUILLAJE
  FLORISTERIA
  TIENDA
  SUPERMERCADOS
  LIBRERIA
  JUGUERIA
  OTRO
}

model Store {
  id String @id @default(uuid())

  name        String
  description String?
  address     String
  logo        String?

  category            StoreCategory
  categoryDescription String?

  openTime  DateTime?
  closeTime DateTime?

  products Product[]

  rankings StoreRanking[]

  Owner   Customer? @relation(fields: [ownerId], references: [id])
  ownerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoreRanking {
  id String @id @default(uuid())

  comment String
  value   Int    @db.TinyInt()
  user    User   @relation(fields: [userId], references: [id])

  Store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}
